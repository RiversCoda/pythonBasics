num1 = 3
num2 = 4
num3 = 5
num4 = 6
print(num1, num2, num3, num4, sep=", ", end=".\n")

# - 格式输出控制 -
## %号格式化输出
num = 1145
print("十六进制数为：%x,八进制数为:%o,二进制数为:%s" % (num, num, bin(num)))
# python中使用%控制时，格式为：print("字符串" % (变量1, 变量2, ...))

## format()方法格式化输出
print("十六进制数为：{0:x},八进制数为:{0:o},二进制数为:{1}".format(num, bin(num)))
# 格式化字符串的函数 str.format()，它增强了字符串格式化的功能。
# 基本语法是通过 {} 和 : 来代替以前的 % 。
# 利用该方法格式化时，会把格式字符串当作一个模板，通过传入的参数进行格式化，并且不会改变原字符串的值。
# 具体形式如下
# 格式字符串.format(输出参数1, 输出参数2, ...)
# 格式字符串包含普通字符和格式说明符，格式说明符是{}括起来的部分，用来指定如何格式化输出。
# 格式说明符可以包含以下部分
# {<参数序号>:<格式控制标记>}
# 参数序号：是一个数字，用于指定传入的参数在输出时的顺序。
# 如果省略序号，那么格式输出夫和输出项目必须一一对应
# 如果使用序号，那么可以不按顺序，甚至可以把一个输出项多次输出
# 输出项序号和格式控制标记之间用冒号分隔
# 格式控制标记的形式如下
# [[填充字符][对齐方式][宽度],[.精度][类型]]
# 其中填充默认是空格，也可以自己指定其他字符
# 对齐方式可以是<（左对齐）、>（右对齐）、^（居中对齐）
# 宽度是输出的宽度
# 精度是小数点后的位数
# 类型是输出的类型，如d、f、s等